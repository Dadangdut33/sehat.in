from django.contrib.auth.models import User, auth
from django.db import models

# Create your models here.
class Tag(models.Model): # Tag of a post, will be generated by admin only
    name = models.CharField(max_length=50)
    type = models.CharField(max_length=50)
    adminOnly = models.BooleanField(default=False)

class Forum(models.Model): # Post 
    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=200)
    content = models.TextField()
    tag = models.ForeignKey(Tag, on_delete=models.CASCADE, null=True, blank=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    likes = models.IntegerField(default=0)
    comments = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
class Artikel(models.Model): # Post 
    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=200)
    content = models.TextField()
    thumbnail_url = models.CharField(max_length=200, blank=True, null=True)
    tag = models.ForeignKey(Tag, on_delete=models.CASCADE, null=True, blank=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Konsultasi(models.Model): # Konsultasi
    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=200)
    content = models.TextField()
    tag = models.ForeignKey(Tag, on_delete=models.CASCADE, null=True, blank=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    comments = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model): # Comment of a post
    id = models.AutoField(primary_key=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    comment_Forum = models.ForeignKey(Forum, on_delete=models.CASCADE, null=True, blank=True)
    comment_Konsultasi = models.ForeignKey(Konsultasi, on_delete=models.CASCADE, null=True, blank=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    likes = models.IntegerField(default=0)

class Like(models.Model): # Post/comment like
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    post = models.ForeignKey(Forum, on_delete=models.CASCADE)
    comment = models.ForeignKey(Comment, on_delete=models.CASCADE, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

class History(models.Model):
    id = models.AutoField(primary_key=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    res_type = models.TextField()
    res_data = models.TextField()
    quiz_type = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

class Notification(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE) # The user who is notified
    post_Forum = models.ForeignKey(Forum, on_delete=models.SET_NULL, null=True, blank=True) # Notification in post, ex: someone commented ...
    post_Konsultasi = models.ForeignKey(Konsultasi, on_delete=models.SET_NULL, null=True, blank=True) # Notification in post, ex: someone commented ...
    comment = models.ForeignKey(Comment, on_delete=models.SET_NULL, null=True, blank=True) # Notifcation in comment, ex: someone replied
    notification_Content = models.TextField(max_length=500) # The notification message, will be auto generated based on the notification type
    created_at = models.DateTimeField(auto_now_add=True)
    read = models.BooleanField(default=False)

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(max_length=500, blank=True, null=True)
    location = models.CharField(max_length=250, blank=True, null=True)
    role = models.TextField(max_length=100, blank=True, null=True)

class Report(models.Model):
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='reporter') # The one that reports
    reportedUser = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='reported') # If reporting a user
    post = models.ForeignKey(Forum, on_delete=models.SET_NULL, null=True) # If reporting a post
    comment = models.ForeignKey(Comment, on_delete=models.SET_NULL, null=True) # If reporting a comment
    reason = models.CharField(max_length=200)
    reportType = models.CharField(max_length=50)
    isResolved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)